<?php

namespace Tests\Feature;

use App\SioriFriends\Models\Book\Book;
use App\SioriFriends\Models\User\User;
use App\SioriFriends\Models\User\UserRepository;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class BookDeleteTest extends TestCase
{
    use DatabaseTransactions;

    /**
     * 本を削除するユーザ
     *
     * @var User
     */
    private $targetUser;

    /**
     * 削除される本
     *
     * @var Book
     */
    private $targetBook;

    /**
     * 本を削除するときにアクセスする path
     */
    private $targetPath;


    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->targetUser = factory(User::class)->create();

        $this->targetBook = factory(Book::class)->create([
            'user_id' => $this->targetUser->id,
        ]);

        $this->targetPath = route('books.destroy', [ 'bookId' => $this->targetBook->id ]);
    }


    public function testDestroySuccess()
    {
        Auth::login($this->targetUser);

        // 削除機能へアクセス
        $response = $this->delete($this->targetPath);
        // 成功したら、リダイレクトする
        $response->assertRedirect();
    }


    /**
     * 本の削除に失敗するときのデータプロバイダ
     *
     * @return array
     */
    public function failedPatternDataProvider()
    {
        return [
            // 'comment' => [status_code, isLogin],
            'failed: guest user.' => [
                403, false,
            ],
            'failed: users who are not authors.' => [
                403, true,
            ],
        ];
    }

    /**
     * @dataProvider failedPatternDataProvider
     */
    public function testDestroyFailed(int $statusCode, bool $isLogin)
    {
        if ($isLogin) {
            $notAuthor = factory(User::class)->create();
            Auth::login($notAuthor);
        }

        $response = $this->delete($this->targetPath);
        $response->assertStatus($statusCode);
    }
}
