<?php

namespace Tests\Unit;

use App\Http\Requests\CreateBookPost;
use Illuminate\Support\Facades\Validator;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class CreateBookPostTest extends TestCase
{
//    use DatabaseMigrations;
    use DatabaseTransactions;

    /** @var CreateBookPost */
    private $target;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->target = new CreateBookPost;
    }

    /**
     * @return array
     */
    public function rulesDataProvider()
    {
        $faker = \Faker\Factory::create('ja_JP');

        return [
            'success pattern' => [
                true, [
                    'title' => $faker->jobTitle,
                    'description' => $faker->sentence(),
                    'is_publishing' => $faker->boolean,
                    'is_commentable' => $faker->boolean,
                    'tags' => [$faker->unique()->word, $faker->unique()->word],
                    'anchors' => [
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                    ],
                ],
            ],
            'success with when boolean field does not exist' => [
                true, [
                    'title' => $faker->jobTitle,
                    'description' => $faker->sentence(),
                    'tags' => [$faker->unique()->word, $faker->unique()->word],
                    'anchors' => [
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                    ],
                ],
            ],
        ];
    }


    /**
     * @param bool $expected 期待値
     * @param array $parameters テストデータ
     * @dataProvider rulesDataProvider
     */
    public function testRules(bool $expected, array $parameters)
    {
        $validator = Validator::make($parameters, $this->target->rules());
        $actual = $validator->passes();

        $this->assertEquals($expected, $actual);
    }
}
