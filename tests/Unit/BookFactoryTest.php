<?php

namespace Tests\Unit;

use App\SioriFriends\Models\Book\BookFactory;
use App\SioriFriends\Models\User\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class BookFactoryTest extends TestCase
{
//    use DatabaseMigrations;
    use DatabaseTransactions;

    /** @var User */
    private $user;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::first();
    }

    /**
     * @return array
     */
    public function successDataProvider()
    {
        $faker = \Faker\Factory::create('ja_JP');

        return [
            'success pattern' => [
                [
                    'title' => $faker->jobTitle,
                    'description' => $faker->sentence(),
                    'is_publishing' => $faker->boolean,
                    'is_commentable' => $faker->boolean,
                    'tags' => [$faker->unique()->word, $faker->unique()->word],
                    'anchors' => [
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                    ],
                ],
            ],
            'success without boolean field' => [
                [
                    'title' => $faker->jobTitle,
                    'description' => $faker->sentence(),
                    'tags' => [$faker->unique()->word, $faker->unique()->word],
                    'anchors' => [
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                        ['url' => $faker->unique()->url, 'name' => $faker->name],
                    ],
                ],
            ],
        ];
    }

    /**
     * @param array $params
     * @dataProvider successDataProvider
     */
    public function testCreate(array $params)
    {
        // test target.
        $book = BookFactory::create($params, $this->user);

        // 本が作成されたか。
        $this->assertDatabaseHas('books', [
            'id' => $book->id,
        ]);

        collect($params['anchors'])->each(function($hash) {
            $this->assertDatabaseHas('anchor_book', [
                'name' => $hash['name'],
            ]);
        });

        $this->assertDatabaseHas('book_tag', [
            'book_id' => $book->id,
        ]);
    }
}
